# Form implementation generated from reading ui file 'ThongKeDoanhThu.ui'
#
# Created by: PyQt6 UI code generator 6.7.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtGui import QPixmap, QStandardItem
from PyQt6.QtCore import QSize
from PyQt6.QtGui import QIcon
import pandas as pd
from PyQt6.QtWidgets import QHeaderView

from Context.DBConnect import Database
from Controller.DơnHangController import DonhangController
import matplotlib.pyplot as plt
import numpy as np
class Ui_Dialog(object):
    def __init__(self, main_window):
      self.main_window = main_window
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(568, 579)
        Dialog.setStyleSheet("background-color: #D0F9FD;")
        self.label = QtWidgets.QLabel(parent=Dialog)
        self.label.setGeometry(QtCore.QRect(160, 10, 301, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(24)
        self.label.setFont(font)
        self.label.setStyleSheet("")
        self.label.setObjectName("label")
        self.tblDuLieu = QtWidgets.QTableView(parent=Dialog)
        self.tblDuLieu.setGeometry(QtCore.QRect(0, 220, 571, 361))
        self.tblDuLieu.setStyleSheet("background-color:white;\n"
"color:black;")
        self.tblDuLieu.setObjectName("tblDuLieu")
        self.line = QtWidgets.QFrame(parent=Dialog)
        self.line.setGeometry(QtCore.QRect(0, 80, 911, 16))
        self.line.setLineWidth(3)
        self.line.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line.setObjectName("line")
        self.btnQuayVe = QtWidgets.QPushButton(parent=Dialog)
        self.btnQuayVe.setGeometry(QtCore.QRect(510, 10, 61, 51))
        self.btnQuayVe.setStyleSheet("")
        self.btnQuayVe.setText("")
        self.btnQuayVe.setObjectName("btnQuayVe")
        self.Favicon = QtWidgets.QLabel(parent=Dialog)
        self.Favicon.setGeometry(QtCore.QRect(10, 10, 121, 71))
        self.Favicon.setText("")
        self.Favicon.setObjectName("Favicon")
        self.btnXuatExcel = QtWidgets.QPushButton(parent=Dialog)
        self.btnXuatExcel.setGeometry(QtCore.QRect(350, 120, 131, 61))
        self.btnXuatExcel.setObjectName("btnXuatExcel")
        self.btnXuatExcel_2 = QtWidgets.QPushButton(parent=Dialog)
        self.btnXuatExcel_2.setGeometry(QtCore.QRect(100, 120, 131, 61))
        self.btnXuatExcel_2.setObjectName("btnXuatExcel_2")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        # =============================CSS============================================
        #
        # CSS thêm Favicon
        pixamp = QPixmap("../Access/Icon/favicon.jpg")
        self.Favicon.setPixmap(pixamp)
        self.Favicon.setScaledContents(True)

        # CSS Label
        self.label.setStyleSheet("""
                            color: #FF4500;
                            font-weight: bold;
                        """)

        # CSS icon
        self.btnXuatExcel.setIcon(QIcon("../Access/Icon/excel.png"))
        self.btnXuatExcel.setIconSize(QSize(40, 40))
        self.btnQuayVe.setIcon(QIcon("../Access/Icon/back.png"))
        self.btnQuayVe.setIconSize(QSize(40, 40))
        self.btnXuatExcel_2.setIcon(QIcon("../Access/Icon/chart.png"))
        self.btnXuatExcel_2.setIconSize(QSize(40, 40))

        # CSS button
        self.btnXuatExcel.setStyleSheet("""
                                                      background-color:#FFFF00;
                                                      border-radius: 10px;
                                                      border: 2px solid blue;
                                                """)
        self.btnQuayVe.setStyleSheet("""      
                                                      background-color:#FFFF00;
                                                      border-radius: 10px;
                                            """)
        self.btnXuatExcel_2.setStyleSheet("""      
                                                              background-color:#FFFF00;
                                                              border-radius: 10px;
                                                              border: 2px solid blue;
                                                    """)

        # CSS combobox

        # =================================SỰ KIỆN=====================================
        self.Dialog = Dialog
        self.btnQuayVe.clicked.connect(self.QuayVe)
        self.load_data()
        self.btnXuatExcel.clicked.connect(self.XuatExcel)
        self.btnXuatExcel_2.clicked.connect(self.VeBieuDo)

        # =================================HÀM========================================
    def VeBieuDo(self):
        # Tạo Controller
        controller = DonhangController()
        # Lấy dữ liệu từ database
        data = controller.getThongKeDonHang()

        # Tạo danh sách tháng và doanh thu mặc định
        thang = ['T' + str(i + 1) for i in range(12)]
        doanh_thu = [0 for _ in range(12)]

        # Cập nhật doanh thu dựa trên dữ liệu
        for row in data:
            doanh_thu[row[0] - 1] = row[1]

        # Tạo một danh sách màu sắc
        colors = plt.cm.viridis(np.linspace(0, 1, 12))

        fig, ax = plt.subplots(figsize=(10, 6))
        bars = ax.bar(thang, doanh_thu, color=colors, align='edge', width=1.0)
        plt.title('Biểu đồ doanh thu theo tháng')
        plt.xlabel('Tháng')
        plt.ylabel('Doanh thu')

        # Tạo một chú thích ban đầu với nội dung rỗng
        annot = ax.annotate("", xy=(0, 0), xytext=(-20, 20), textcoords="offset points",
                            bbox=dict(boxstyle="round", fc="w"),
                            arrowprops=dict(arrowstyle="->"))
        annot.set_visible(False)

        # Tạo một hàm để cập nhật chú thích khi di chuột vào cột
        def update_annot(bar):
            x = bar.get_x() + bar.get_width() / 2
            y = bar.get_y() + bar.get_height()
            annot.xy = (x, y)
            text = f"Doanh thu: {bar.get_height()}"
            annot.set_text(text)

        # Tạo một hàm để hiển thị chú thích khi di chuột vào cột
        def on_motion(event):
            visible = annot.get_visible()
            if event.inaxes == ax:
                for bar in bars:
                    cont, _ = bar.contains(event)
                    if cont:
                        update_annot(bar)
                        annot.set_visible(True)
                        fig.canvas.draw_idle()
                        return
            if visible:
                annot.set_visible(False)
                fig.canvas.draw_idle()

        # Kết nối sự kiện với hàm
        fig.canvas.mpl_connect('motion_notify_event', on_motion)

        plt.show()
    def QuayVe(self):
        from View.UiAdmin import Ui_MainWindow
        self.main_window = QtWidgets.QMainWindow()  # tạo một instance mới của QMainWindow
        self.ui = Ui_MainWindow(self.main_window)  # truyền self.main_window như là MainWindow
        self.ui.setupUi(self.main_window)
        self.main_window.show()
        self.Dialog.hide()

    def load_data(self):
        from Controller.DơnHangController import DonhangController
        controller = DonhangController()
        data = controller.getAllChitietdonhang()
        model = QtGui.QStandardItemModel()
        model.setHorizontalHeaderLabels(
            ["ID", "ID Đơn Hàng", "ID Sản Phẩm", "Số Lượng", "Đơn Giá", "Thành Tiền", "Ngày bán"])
        for i, nv in enumerate(data):
            for j, data in enumerate(nv):
                model.setItem(i, j, QStandardItem(str(data)))
        self.tblDuLieu.setModel(model)
        (self.tblDuLieu.horizontalHeader().setSectionResizeMode
         (QHeaderView.ResizeMode.Stretch))

    def XuatExcel(self):
        try:
            db = Database()
            connection = db.get_connection()
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM chitietdonhang")
            data = cursor.fetchall()

            # Fetching column names dynamically from the cursor
            columns = [desc[0] for desc in cursor.description]

            df = pd.DataFrame(data, columns=columns)

            excel_file = 'demo.xlsx'
            df.to_excel(excel_file, index=False, engine='xlsxwriter')
            print("Export successful.")
        except Exception as e:
            print(f"An error occurred: {e}")
        finally:
            cursor.close()
            connection.close()

    # =========================================================================
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "Thống Kê Doanh Thu"))
        self.btnXuatExcel.setText(_translate("Dialog", "Xuất Ra EXCEL"))
        self.btnXuatExcel_2.setText(_translate("Dialog", "Vẽ Biểu Đồ"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog(Dialog)
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec())
